name: "SonarQube SAST Security Gate"

on:
  workflow_dispatch:
  pull_request:
    branches:
      - develop
      - main
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write

jobs:
  # Detect project languages first
  detect-languages:
    name: üîç Detect Project Languages
    runs-on: ubuntu-latest
    outputs:
      languages: ${{ steps.detect.outputs.languages }}
      has-python: ${{ steps.detect.outputs.has-python }}
      has-java: ${{ steps.detect.outputs.has-java }}
      has-javascript: ${{ steps.detect.outputs.has-javascript }}
      python-manager: ${{ steps.detect.outputs.python-manager }}
      java-build-tool: ${{ steps.detect.outputs.java-build-tool }}
      javascript-manager: ${{ steps.detect.outputs.javascript-manager }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Detect project languages and tools
        id: detect
        run: |
          echo "üîç Analyzing project structure..."
          
          # Initialize language detection
          LANGUAGES="[]"
          HAS_PYTHON="false"
          HAS_JAVA="false" 
          HAS_JAVASCRIPT="false"
          PYTHON_MANAGER=""
          JAVA_BUILD_TOOL=""
          JS_MANAGER=""
          
          # Python Detection
          if [ -f "requirements.txt" ] || [ -f "pyproject.toml" ] || [ -f "Pipfile" ]; then
            echo "üêç Python project detected"
            HAS_PYTHON="true"
            LANGUAGES=$(echo "$LANGUAGES" | jq -c '. + ["python"]')
            
            if [ -f "pyproject.toml" ] && grep -q "tool.poetry" pyproject.toml 2>/dev/null; then
              PYTHON_MANAGER="poetry"
              echo "  üì¶ Package Manager: Poetry"
            elif [ -f "Pipfile" ]; then
              PYTHON_MANAGER="pipenv"
              echo "  üì¶ Package Manager: Pipenv"
            else
              PYTHON_MANAGER="pip"
              echo "  üì¶ Package Manager: pip"
            fi
          fi
          
          # Java Detection
          if [ -f "pom.xml" ] || [ -f "build.gradle" ] || [ -f "build.gradle.kts" ]; then
            echo "‚òï Java project detected"
            HAS_JAVA="true"
            LANGUAGES=$(echo "$LANGUAGES" | jq -c '. + ["java"]')
            
            if [ -f "pom.xml" ]; then
              JAVA_BUILD_TOOL="maven"
              echo "  üèóÔ∏è Build Tool: Maven"
            else
              JAVA_BUILD_TOOL="gradle"
              echo "  üèóÔ∏è Build Tool: Gradle"
            fi
          fi
          
          # JavaScript/Node.js/Angular Detection
          if [ -f "package.json" ]; then
            echo "üü¢ JavaScript/Node.js project detected"
            HAS_JAVASCRIPT="true"
            LANGUAGES=$(echo "$LANGUAGES" | jq -c '. + ["javascript"]')
            
            if [ -f "yarn.lock" ]; then
              JS_MANAGER="yarn"
              echo "  üì¶ Package Manager: Yarn"
            elif [ -f "pnpm-lock.yaml" ]; then
              JS_MANAGER="pnpm"
              echo "  üì¶ Package Manager: pnpm"
            else
              JS_MANAGER="npm"
              echo "  üì¶ Package Manager: npm"
            fi
            
            # Check for Angular
            if grep -q "@angular" package.json 2>/dev/null; then
              echo "  üÖ∞Ô∏è Angular framework detected"
            fi
          fi
          
          echo "üéØ Detected languages: $LANGUAGES"
          
          # Set outputs
          echo "languages=$LANGUAGES" >> $GITHUB_OUTPUT
          echo "has-python=$HAS_PYTHON" >> $GITHUB_OUTPUT
          echo "has-java=$HAS_JAVA" >> $GITHUB_OUTPUT
          echo "has-javascript=$HAS_JAVASCRIPT" >> $GITHUB_OUTPUT
          echo "python-manager=$PYTHON_MANAGER" >> $GITHUB_OUTPUT
          echo "java-build-tool=$JAVA_BUILD_TOOL" >> $GITHUB_OUTPUT
          echo "javascript-manager=$JS_MANAGER" >> $GITHUB_OUTPUT

  # Python SonarQube SAST
  python-sonarqube:
    name: üêç Python SonarQube Analysis
    runs-on: nbi
    needs: detect-languages
    if: needs.detect-languages.outputs.has-python == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          
          if [ "${{ needs.detect-languages.outputs.python-manager }}" = "poetry" ]; then
            pip install poetry
            poetry install
            poetry add --group dev pytest pytest-cov
          elif [ "${{ needs.detect-languages.outputs.python-manager }}" = "pipenv" ]; then
            pip install pipenv
            pipenv install --dev
            pipenv install pytest pytest-cov
          else
            pip install -r requirements.txt
            pip install pytest pytest-cov
          fi

      - name: Ensure app directory structure
        run: |
          mkdir -p app
          # Copy source code to app directory for SonarQube
          shopt -s extglob
          cp -r !(app|test|tests|.git|.github|k8s|node_modules) app/ 2>/dev/null || true

      - name: Run Python tests with coverage
        run: |
          export PYTHONPATH=$(pwd)/app
          echo "üß™ Running Python tests with coverage..."
          
          # Check if test directory exists
          if [ -d "test" ] || [ -d "tests" ]; then
            echo "üìÅ Test directory found, running tests..."
            
            if [ "${{ needs.detect-languages.outputs.python-manager }}" = "poetry" ]; then
              poetry run pytest --cov=app --cov-report=xml:coverage.xml --cov-report=term test/ || poetry run pytest --cov=app --cov-report=xml:coverage.xml --cov-report=term tests/
            elif [ "${{ needs.detect-languages.outputs.python-manager }}" = "pipenv" ]; then
              pipenv run pytest --cov=app --cov-report=xml:coverage.xml --cov-report=term test/ || pipenv run pytest --cov=app --cov-report=xml:coverage.xml --cov-report=term tests/
            else
              pytest --cov=app --cov-report=xml:coverage.xml --cov-report=term test/ || pytest --cov=app --cov-report=xml:coverage.xml --cov-report=term tests/
            fi
            
            # Validate coverage file
            if [ -f "coverage.xml" ]; then
              echo "‚úÖ Python coverage generated successfully"
            else
              echo "‚ö†Ô∏è Python coverage generation failed, but continuing..."
            fi
          else
            echo "‚ö†Ô∏è No test directory found (test/ or tests/), skipping coverage..."
            echo "üìù Creating empty coverage file to satisfy SonarQube..."
            echo '<?xml version="1.0" encoding="UTF-8"?><coverage version="1.0"><sources></sources><packages></packages></coverage>' > coverage.xml
          fi
        continue-on-error: true

      - name: SonarQube Python Analysis
        uses: Deloitte-US-Engineering/sonar-scan-action@main
        continue-on-error: true
        with:
          SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
          SONAR_HOST_URL: https://sonar.tools.deloitteinnovation.us/
          ORG_NAME: INT
          JFROG_USERNAME: ${{ secrets.SVC_JFROG_USERNAME }}
          JFROG_PASSWORD: ${{ secrets.SVC_JFROG_TOKEN }}
        env:
          SONAR_SCANNER_OPTS: >
            -Dsonar.pullrequest.key=${{ github.event.pull_request.number }}
            -Dsonar.pullrequest.branch=${{ github.head_ref }}
            -Dsonar.pullrequest.base=${{ github.base_ref }}
            -Dsonar.projectKey=INT__${{ github.event.repository.name }}

      - name: üö® Python SonarQube Quality Gate Check
        id: python-quality-gate
        run: |
          echo "üîç Checking Python SonarQube Quality Gate..."
          
          PROJECT_KEY="INT__${{ github.event.repository.name }}"
          SONAR_URL="https://sonar.tools.deloitteinnovation.us"
          
          # Wait for analysis to complete
          echo "‚è≥ Waiting for SonarQube analysis to complete..."
          sleep 45
          
          # Quality gate validation is handled by the sonar-scan-action above
          # Commenting out quality gate checks since they're handled by sonar-scan-action
          # Get quality gate status with error handling
          # echo "üîç Fetching quality gate status..."
          # QUALITY_GATE_RESPONSE=$(curl -s \
          #   "${SONAR_URL}/api/qualitygates/project_status?projectKey=${PROJECT_KEY}&token=${{ secrets.SONARQUBE_TOKEN }}")
          # 
          # echo "Quality Gate Response: $QUALITY_GATE_RESPONSE"
          # 
          # QUALITY_GATE_STATUS=$(echo "$QUALITY_GATE_RESPONSE" | jq -r '.projectStatus.status // "UNKNOWN"')
          # echo "Quality Gate Status: $QUALITY_GATE_STATUS"
          
          # Get issues breakdown with error handling - focusing on PR changes
          echo "üîç Fetching security issues for PR branch: ${{ github.head_ref }}..."
          
          # Add PR context to API calls to focus on new/changed issues
          PR_PARAMS="&branch=${{ github.head_ref }}"
          
          BLOCKER_RESPONSE=$(curl -s \
            "${SONAR_URL}/api/issues/search?componentKeys=${PROJECT_KEY}&severities=BLOCKER&resolved=false${PR_PARAMS}&token=${{ secrets.SONARQUBE_TOKEN }}")
          BLOCKER_ISSUES=$(echo "$BLOCKER_RESPONSE" | jq -r '.total // 0')
          
          CRITICAL_RESPONSE=$(curl -s \
            "${SONAR_URL}/api/issues/search?componentKeys=${PROJECT_KEY}&severities=CRITICAL&resolved=false${PR_PARAMS}&token=${{ secrets.SONARQUBE_TOKEN }}")
          CRITICAL_ISSUES=$(echo "$CRITICAL_RESPONSE" | jq -r '.total // 0')
          
          MEDIUM_RESPONSE=$(curl -s \
            "${SONAR_URL}/api/issues/search?componentKeys=${PROJECT_KEY}&severities=MAJOR&resolved=false${PR_PARAMS}&token=${{ secrets.SONARQUBE_TOKEN }}")
          MEDIUM_ISSUES=$(echo "$MEDIUM_RESPONSE" | jq -r '.total // 0')
          
          # Get security hotspots for PR
          HOTSPOTS_RESPONSE=$(curl -s \
            "${SONAR_URL}/api/hotspots/search?projectKey=${PROJECT_KEY}&status=TO_REVIEW&pullRequest=${{ github.head_ref }}&token=${{ secrets.SONARQUBE_TOKEN }}")
          SECURITY_HOTSPOTS=$(echo "$HOTSPOTS_RESPONSE" | jq -r '.paging.total // 0')
          
          echo "üêç Python Security Issues Found:"
          echo "   üî¥ Blocker Issues: $BLOCKER_ISSUES"
          echo "   üü† Critical Issues: $CRITICAL_ISSUES" 
          echo "   üü° Medium Issues: $MEDIUM_ISSUES"
          echo "   üî• Security Hotspots: $SECURITY_HOTSPOTS"
          
          # Debug: Show API responses if issues found
          if [ "$BLOCKER_ISSUES" != "0" ] || [ "$CRITICAL_ISSUES" != "0" ] || [ "$MEDIUM_ISSUES" -gt 0 ] || [ "$SECURITY_HOTSPOTS" -gt 0 ]; then
            echo "üîç Debug - Blocker Response: $BLOCKER_RESPONSE"
            echo "üîç Debug - Critical Response: $CRITICAL_RESPONSE"
            echo "üîç Debug - Medium Response: $MEDIUM_RESPONSE"
            echo "üîç Debug - Security Hotspots Response: $HOTSPOTS_RESPONSE"
          fi
          
          # Set outputs for summary
          echo "blocker-issues=$BLOCKER_ISSUES" >> $GITHUB_OUTPUT
          echo "critical-issues=$CRITICAL_ISSUES" >> $GITHUB_OUTPUT
          echo "medium-issues=$MEDIUM_ISSUES" >> $GITHUB_OUTPUT
          echo "security-hotspots=$SECURITY_HOTSPOTS" >> $GITHUB_OUTPUT
          # echo "quality-gate-status=$QUALITY_GATE_STATUS" >> $GITHUB_OUTPUT
          
          # Check if we got valid numbers (not null or empty)
          if [ "$BLOCKER_ISSUES" = "null" ] || [ "$CRITICAL_ISSUES" = "null" ] || [ "$MEDIUM_ISSUES" = "null" ] || [ "$SECURITY_HOTSPOTS" = "null" ]; then
            echo "‚ö†Ô∏è Warning: Could not fetch issue counts from SonarQube API"
            echo "This might be due to:"
            echo "  - Analysis still in progress"
            echo "  - Project not found"
            echo "  - API authentication issues"
            echo ""
            echo "‚ùå Python analysis FAILED: Unable to verify security status"
            exit 1
          fi
          
          # Security-focused validation (independent of quality gate)
          echo "üõ°Ô∏è Performing security-focused validation..."
          
          # Check for blocking security issues
          if [ "$BLOCKER_ISSUES" -gt 0 ] || [ "$CRITICAL_ISSUES" -gt 0 ]; then
            echo "‚ùå Python analysis FAILED: Found $BLOCKER_ISSUES blocker and $CRITICAL_ISSUES critical security issues"
            echo "üö´ Build pipeline BLOCKED - Fix security issues before merge"
            exit 1
          elif [ "$MEDIUM_ISSUES" -gt 0 ]; then
            echo "‚ùå Python analysis FAILED: Found $MEDIUM_ISSUES medium security issues (limit: 0)"
            echo "üö´ Build pipeline BLOCKED - Fix all medium priority security issues"
            exit 1
          elif [ "$SECURITY_HOTSPOTS" -gt 0 ]; then
            echo "‚ùå Python analysis FAILED: Found $SECURITY_HOTSPOTS security hotspots (mandatory: 0)"
            echo "üö´ Build pipeline BLOCKED - Review and resolve all security hotspots before merge"
            exit 1
          else
            echo "‚úÖ Python security analysis PASSED: No blocking security issues found"
            echo "üéâ Python security validation completed successfully!"
          fi

          # Commented out quality gate status checking since it's handled by sonar-scan-action
          # Check SonarQube Quality Gate Status
          # if [ "$QUALITY_GATE_STATUS" = "ERROR" ]; then
          #   echo "‚ö†Ô∏è SonarQube Quality Gate: $QUALITY_GATE_STATUS"
          #   echo "üîç Checking if failure is due to security issues or other metrics..."
          #   
          #   # If security issues found, fail for security reasons
          #   if [ "$BLOCKER_ISSUES" -gt 0 ] || [ "$CRITICAL_ISSUES" -gt 0 ]; then
          #     echo "‚ùå Python analysis FAILED: Found $BLOCKER_ISSUES blocker and $CRITICAL_ISSUES critical security issues"
          #     echo "üö´ Build pipeline BLOCKED - Fix security issues before merge"
          #     exit 1
          #   elif [ "$HIGH_ISSUES" -gt 0 ]; then
          #     echo "‚ùå Python analysis FAILED: Found $HIGH_ISSUES high security issues"
          #     echo "üö´ Build pipeline BLOCKED - Reduce high priority security issues"
          #     exit 1
          #   elif [ "$SECURITY_HOTSPOTS" -gt 10 ]; then
          #     echo "‚ö†Ô∏è Python analysis WARNING: Found $SECURITY_HOTSPOTS security hotspots (recommended limit: 10)"
          #     echo "üîç Please review security hotspots before merge - they may contain security vulnerabilities"
          #     echo "üìä Quality Gate failure likely due to: coverage, duplications, maintainability, or reliability"
          #     echo "üõ°Ô∏è Security check PASSED: No blocking security issues found (hotspots require manual review)"
          #     echo "‚úÖ Proceeding with security-focused pipeline (non-security quality gate failures ignored)"
          #   else
          #     echo "‚ö†Ô∏è SonarQube Quality Gate failed, but no blocking security issues found"
          #     echo "üìä Quality Gate failure likely due to: coverage, duplications, maintainability, or reliability"
          #     echo "üõ°Ô∏è Security check PASSED: No blocking security issues found"
          #     if [ "$SECURITY_HOTSPOTS" -gt 0 ]; then
          #       echo "‚ÑπÔ∏è Found $SECURITY_HOTSPOTS security hotspots that require manual review"
          #     fi
          #     echo "‚úÖ Proceeding with security-focused pipeline (non-security quality gate failures ignored)"
          #   fi
          # else
          #   # Quality gate passed or unknown, check security issues anyway
          #   if [ "$BLOCKER_ISSUES" -gt 0 ] || [ "$CRITICAL_ISSUES" -gt 0 ]; then
          #     echo "‚ùå Python analysis FAILED: Found $BLOCKER_ISSUES blocker and $CRITICAL_ISSUES critical issues"
          #     echo "üö´ Build pipeline BLOCKED - Fix security issues before merge"
          #     exit 1
          #   elif [ "$HIGH_ISSUES" -gt 0 ]; then
          #     echo "‚ùå Python analysis FAILED: Found $HIGH_ISSUES high issues"
          #     echo "üö´ Build pipeline BLOCKED - Reduce high priority issues"
          #     exit 1
          #   else
          #     echo "‚úÖ Python analysis PASSED: No blocking security issues found"
          #     if [ "$SECURITY_HOTSPOTS" -gt 10 ]; then
          #       echo "‚ö†Ô∏è Found $SECURITY_HOTSPOTS security hotspots (recommended limit: 10) - please review before merge"
          #     elif [ "$SECURITY_HOTSPOTS" -gt 0 ]; then
          #       echo "‚ÑπÔ∏è Found $SECURITY_HOTSPOTS security hotspots that require manual review"
          #     fi
          #   fi
          # fi

  # Java SonarQube SAST  
  java-sonarqube:
    name: ‚òï Java SonarQube Analysis
    runs-on: nbi
    needs: detect-languages
    if: needs.detect-languages.outputs.has-java == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: ${{ needs.detect-languages.outputs.java-build-tool }}

      - name: Install build tool
        run: |
          if [ "${{ needs.detect-languages.outputs.java-build-tool }}" = "maven" ]; then
            # Check if Maven is installed, install if not
            if ! command -v mvn &> /dev/null; then
              echo "üì¶ Maven not found, installing Maven..."
              # Install Maven on Ubuntu/Linux
              sudo apt-get update
              sudo apt-get install -y maven
            fi
            echo "‚úÖ Maven installation verified:"
            mvn --version
          else
            # Gradle wrapper should be in the repository
            chmod +x ./gradlew
            ./gradlew --version
          fi

      - name: Run Java tests with coverage
        run: |
          echo "üß™ Running Java tests with coverage..."
          
          # Check if test directory exists
          if [ -d "src/test" ] || [ -d "test" ] || [ -d "tests" ]; then
            echo "üìÅ Test directory found, running tests..."
            
            if [ "${{ needs.detect-languages.outputs.java-build-tool }}" = "maven" ]; then
              mvn clean test jacoco:report || echo "‚ö†Ô∏è Java tests failed, but continuing..."
            else
              ./gradlew clean test jacocoTestReport || echo "‚ö†Ô∏è Java tests failed, but continuing..."
            fi
            
            # Validate coverage file
            if [ -f "target/site/jacoco/jacoco.xml" ] || [ -f "build/reports/jacoco/test/jacocoTestReport.xml" ]; then
              echo "‚úÖ Java coverage generated successfully"
            else
              echo "‚ö†Ô∏è Java coverage generation failed, but continuing..."
            fi
          else
            echo "‚ö†Ô∏è No test directory found (src/test/, test/, or tests/), skipping coverage..."
            echo "üìù Creating empty coverage file to satisfy SonarQube..."
            mkdir -p target/site/jacoco
            echo '<?xml version="1.0" encoding="UTF-8"?><report name="JaCoCo Coverage Report"><sessioninfo id="test" start="0" dump="0"/><package name=""><class name=""><method name="" desc="" line="1"/></class></package></report>' > target/site/jacoco/jacoco.xml
          fi
        continue-on-error: true

      # - name: Build and test with coverage
      #   run: |
      #     echo "üèóÔ∏è Building Java project with coverage..."
      #     
      #     if [ "${{ needs.detect-languages.outputs.java-build-tool }}" = "maven" ]; then
      #       mvn clean verify jacoco:report
      #     else
      #       ./gradlew clean build jacocoTestReport
      #     fi

      - name: SonarQube Java Analysis
        uses: Deloitte-US-Engineering/sonar-scan-action@main
        continue-on-error: true
        with:
          SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
          SONAR_HOST_URL: https://sonar.tools.deloitteinnovation.us/
          ORG_NAME: INT
          JFROG_USERNAME: ${{ secrets.SVC_JFROG_USERNAME }}
          JFROG_PASSWORD: ${{ secrets.SVC_JFROG_TOKEN }}
        env:
          SONAR_SCANNER_OPTS: >
            -Dsonar.pullrequest.key=${{ github.event.pull_request.number }}
            -Dsonar.pullrequest.branch=${{ github.head_ref }}
            -Dsonar.pullrequest.base=${{ github.base_ref }}
            -Dsonar.projectKey=INT__${{ github.event.repository.name }}

      - name: üö® Java SonarQube Quality Gate Check
        id: java-quality-gate
        run: |
          echo "üîç Checking Java SonarQube Quality Gate..."
          
          PROJECT_KEY="INT__${{ github.event.repository.name }}"
          SONAR_URL="https://sonar.tools.deloitteinnovation.us"
          
          # Wait for analysis to complete
          echo "‚è≥ Waiting for SonarQube analysis to complete..."
          sleep 45
          
          # Quality gate validation is handled by the sonar-scan-action above
          # Commenting out quality gate checks since they're handled by sonar-scan-action
          # Get quality gate status with error handling
          # echo "üîç Fetching quality gate status..."
          # QUALITY_GATE_RESPONSE=$(curl -s \
          #   "${SONAR_URL}/api/qualitygates/project_status?projectKey=${PROJECT_KEY}&token=${{ secrets.SONARQUBE_TOKEN }}")
          # 
          # echo "Quality Gate Response: $QUALITY_GATE_RESPONSE"
          # 
          # QUALITY_GATE_STATUS=$(echo "$QUALITY_GATE_RESPONSE" | jq -r '.projectStatus.status // "UNKNOWN"')
          # echo "Quality Gate Status: $QUALITY_GATE_STATUS"
          
          # Get issues breakdown with error handling - focusing on PR changes
          echo "üîç Fetching security issues for PR branch: ${{ github.head_ref }}..."
          
          # Add PR context to API calls to focus on new/changed issues
          PR_PARAMS="&branch=${{ github.head_ref }}"
          
          BLOCKER_RESPONSE=$(curl -s \
            "${SONAR_URL}/api/issues/search?componentKeys=${PROJECT_KEY}&severities=BLOCKER&resolved=false${PR_PARAMS}&token=${{ secrets.SONARQUBE_TOKEN }}")
          BLOCKER_ISSUES=$(echo "$BLOCKER_RESPONSE" | jq -r '.total // 0')
          
          CRITICAL_RESPONSE=$(curl -s \
            "${SONAR_URL}/api/issues/search?componentKeys=${PROJECT_KEY}&severities=CRITICAL&resolved=false${PR_PARAMS}&token=${{ secrets.SONARQUBE_TOKEN }}")
          CRITICAL_ISSUES=$(echo "$CRITICAL_RESPONSE" | jq -r '.total // 0')
          
          MEDIUM_RESPONSE=$(curl -s \
            "${SONAR_URL}/api/issues/search?componentKeys=${PROJECT_KEY}&severities=MAJOR&resolved=false${PR_PARAMS}&token=${{ secrets.SONARQUBE_TOKEN }}")
          MEDIUM_ISSUES=$(echo "$MEDIUM_RESPONSE" | jq -r '.total // 0')
          
          # Get security hotspots for PR
          HOTSPOTS_RESPONSE=$(curl -s \
            "${SONAR_URL}/api/hotspots/search?projectKey=${PROJECT_KEY}&status=TO_REVIEW&pullRequest=${{ github.head_ref }}&token=${{ secrets.SONARQUBE_TOKEN }}")
          SECURITY_HOTSPOTS=$(echo "$HOTSPOTS_RESPONSE" | jq -r '.paging.total // 0')
          
          echo "‚òï Java Security Issues Found:"
          echo "   üî¥ Blocker Issues: $BLOCKER_ISSUES"
          echo "   üü† Critical Issues: $CRITICAL_ISSUES" 
          echo "   üü° Medium Issues: $MEDIUM_ISSUES"
          echo "   üî• Security Hotspots: $SECURITY_HOTSPOTS"
          
          # Debug: Show API responses if issues found
          if [ "$BLOCKER_ISSUES" != "0" ] || [ "$CRITICAL_ISSUES" != "0" ] || [ "$MEDIUM_ISSUES" -gt 0 ] || [ "$SECURITY_HOTSPOTS" -gt 0 ]; then
            echo "üîç Debug - Blocker Response: $BLOCKER_RESPONSE"
            echo "üîç Debug - Critical Response: $CRITICAL_RESPONSE"
            echo "üîç Debug - Medium Response: $MEDIUM_RESPONSE"
            echo "üîç Debug - Security Hotspots Response: $HOTSPOTS_RESPONSE"
          fi
          
          # Set outputs for summary
          echo "blocker-issues=$BLOCKER_ISSUES" >> $GITHUB_OUTPUT
          echo "critical-issues=$CRITICAL_ISSUES" >> $GITHUB_OUTPUT
          echo "medium-issues=$MEDIUM_ISSUES" >> $GITHUB_OUTPUT
          echo "security-hotspots=$SECURITY_HOTSPOTS" >> $GITHUB_OUTPUT
          # echo "quality-gate-status=$QUALITY_GATE_STATUS" >> $GITHUB_OUTPUT
          
          # Check if we got valid numbers (not null or empty)
          if [ "$BLOCKER_ISSUES" = "null" ] || [ "$CRITICAL_ISSUES" = "null" ] || [ "$MEDIUM_ISSUES" = "null" ] || [ "$SECURITY_HOTSPOTS" = "null" ]; then
            echo "‚ö†Ô∏è Warning: Could not fetch issue counts from SonarQube API"
            echo "This might be due to:"
            echo "  - Analysis still in progress"
            echo "  - Project not found"
            echo "  - API authentication issues"
            echo ""
            echo "‚ùå Java analysis FAILED: Unable to verify security status"
            exit 1
          fi
          
          # Security-focused validation (independent of quality gate)
          echo "üõ°Ô∏è Performing security-focused validation..."
          
          # Check for blocking security issues
          if [ "$BLOCKER_ISSUES" -gt 0 ] || [ "$CRITICAL_ISSUES" -gt 0 ]; then
            echo "‚ùå Java analysis FAILED: Found $BLOCKER_ISSUES blocker and $CRITICAL_ISSUES critical security issues"
            echo "üö´ Build pipeline BLOCKED - Fix security issues before merge"
            exit 1
          elif [ "$MEDIUM_ISSUES" -gt 0 ]; then
            echo "‚ùå Java analysis FAILED: Found $MEDIUM_ISSUES medium security issues (limit: 0)"
            echo "üö´ Build pipeline BLOCKED - Fix all medium priority security issues"
            exit 1
          elif [ "$SECURITY_HOTSPOTS" -gt 0 ]; then
            echo "‚ùå Java analysis FAILED: Found $SECURITY_HOTSPOTS security hotspots (mandatory: 0)"
            echo "üö´ Build pipeline BLOCKED - Review and resolve all security hotspots before merge"
            exit 1
          else
            echo "‚úÖ Java security analysis PASSED: No blocking security issues found"
            echo "üéâ Java security validation completed successfully!"
          fi

          # Commented out quality gate status checking since it's handled by sonar-scan-action
          # Check SonarQube Quality Gate Status
          # if [ "$QUALITY_GATE_STATUS" = "ERROR" ]; then
          #   echo "‚ö†Ô∏è SonarQube Quality Gate: $QUALITY_GATE_STATUS"
          #   echo "üîç Checking if failure is due to security issues or other metrics..."
          #   
          #   # If security issues found, fail for security reasons
          #   if [ "$BLOCKER_ISSUES" -gt 0 ] || [ "$CRITICAL_ISSUES" -gt 0 ]; then
          #     echo "‚ùå Java analysis FAILED: Found $BLOCKER_ISSUES blocker and $CRITICAL_ISSUES critical security issues"
          #     echo "üö´ Build pipeline BLOCKED - Fix security issues before merge"
          #     exit 1
          #   elif [ "$HIGH_ISSUES" -gt 0 ]; then
          #     echo "‚ùå Java analysis FAILED: Found $HIGH_ISSUES high security issues"
          #     echo "üö´ Build pipeline BLOCKED - Reduce high priority security issues"
          #     exit 1
          #   else
          #     echo "‚ö†Ô∏è SonarQube Quality Gate failed, but no blocking security issues found"
          #     echo "üìä Quality Gate failure likely due to: coverage, duplications, maintainability, or reliability"
          #     echo "üõ°Ô∏è Security check PASSED: No blocking security issues found"
          #     echo "‚úÖ Proceeding with security-focused pipeline (non-security quality gate failures ignored)"
          #   fi
          # else
          #   # Quality gate passed or unknown, check security issues anyway
          #   if [ "$BLOCKER_ISSUES" -gt 0 ] || [ "$CRITICAL_ISSUES" -gt 0 ]; then
          #     echo "‚ùå Java analysis FAILED: Found $BLOCKER_ISSUES blocker and $CRITICAL_ISSUES critical issues"
          #     echo "üö´ Build pipeline BLOCKED - Fix security issues before merge"
          #     exit 1
          #   elif [ "$HIGH_ISSUES" -gt 0 ]; then
          #     echo "‚ùå Java analysis FAILED: Found $HIGH_ISSUES high issues"
          #     echo "üö´ Build pipeline BLOCKED - Reduce high priority issues"
          #     exit 1
          #   else
          #     echo "‚úÖ Java analysis PASSED: No blocking security issues found"
          #   fi
          # fi

  # JavaScript/Node.js/Angular SonarQube SAST
  javascript-sonarqube:
    name: üü¢ JavaScript SonarQube Analysis
    runs-on: nbi
    needs: detect-languages
    if: needs.detect-languages.outputs.has-javascript == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: ${{ needs.detect-languages.outputs.javascript-manager }}

      - name: Install dependencies
        run: |
          case "${{ needs.detect-languages.outputs.javascript-manager }}" in
            "yarn")
              yarn install --frozen-lockfile
              ;;
            "pnpm")
              npm install -g pnpm
              pnpm install --frozen-lockfile
              ;;
            *)
              # Try npm ci first, fallback to npm install if lockfile version incompatible
              echo "üîç Attempting npm ci..."
              if npm ci; then
                echo "‚úÖ npm ci completed successfully"
              else
                echo "‚ö†Ô∏è npm ci failed, likely due to lockfile version compatibility"
                echo "üîÑ Falling back to npm install..."
                npm install
                echo "‚úÖ npm install completed as fallback"
              fi
              ;;
          esac

      - name: Run JavaScript tests with coverage
        run: |
          echo "üß™ Running JavaScript tests with coverage..."
          
          # Check if test directory exists or test scripts are defined
          if [ -d "test" ] || [ -d "tests" ] || [ -d "src/test" ] || [ -d "__tests__" ] || grep -q '"test"' package.json 2>/dev/null; then
            echo "üìÅ Test directory or test scripts found, running tests..."
            
            case "${{ needs.detect-languages.outputs.javascript-manager }}" in
              "yarn")
                yarn test --coverage --coverageReporters=lcov --coverageReporters=text --watchAll=false || echo "‚ö†Ô∏è JavaScript tests failed, but continuing..."
                ;;
              "pnpm")
                pnpm test --coverage --coverageReporters=lcov --coverageReporters=text --watchAll=false || echo "‚ö†Ô∏è JavaScript tests failed, but continuing..."
                ;;
              *)
                npm test -- --coverage --coverageReporters=lcov --coverageReporters=text --watchAll=false || echo "‚ö†Ô∏è JavaScript tests failed, but continuing..."
                ;;
            esac
            
            # Validate coverage file
            if [ -f "coverage/lcov.info" ] || [ -f "coverage/coverage-final.json" ]; then
              echo "‚úÖ JavaScript coverage generated successfully"
            else
              echo "‚ö†Ô∏è JavaScript coverage generation failed, but continuing..."
            fi
          else
            echo "‚ö†Ô∏è No test directory found (test/, tests/, src/test/, __tests__/) or test scripts in package.json, skipping coverage..."
            echo "üìù Creating empty coverage file to satisfy SonarQube..."
            mkdir -p coverage
            echo 'TN:
            SF:dummy.js
            end_of_record' > coverage/lcov.info
          fi
        env:
          CI: true
        continue-on-error: true

      - name: SonarQube JavaScript Analysis
        uses: Deloitte-US-Engineering/sonar-scan-action@main
        continue-on-error: true
        with:
          SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
          SONAR_HOST_URL: https://sonar.tools.deloitteinnovation.us/
          ORG_NAME: INT
          JFROG_USERNAME: ${{ secrets.SVC_JFROG_USERNAME }}
          JFROG_PASSWORD: ${{ secrets.SVC_JFROG_TOKEN }}
        env:
          SONAR_SCANNER_OPTS: >
            -Dsonar.pullrequest.key=${{ github.event.pull_request.number }}
            -Dsonar.pullrequest.branch=${{ github.head_ref }}
            -Dsonar.pullrequest.base=${{ github.base_ref }}
            -Dsonar.projectKey=INT__${{ github.event.repository.name }}

      - name: üö® JavaScript SonarQube Quality Gate Check
        id: javascript-quality-gate
        run: |
          echo "üîç Checking JavaScript SonarQube Quality Gate..."
          
          PROJECT_KEY="INT__${{ github.event.repository.name }}"
          SONAR_URL="https://sonar.tools.deloitteinnovation.us"
          
          # Wait for analysis to complete
          sleep 30
          
          # Quality gate validation is handled by the sonar-scan-action above
          # Commenting out quality gate checks since they're handled by sonar-scan-action
          # Get quality gate status
          # QUALITY_GATE_STATUS=$(curl -s \
          #   "${SONAR_URL}/api/qualitygates/project_status?projectKey=${PROJECT_KEY}&token=${{ secrets.SONARQUBE_TOKEN }}" \
          #   | jq -r '.projectStatus.status')
          # 
          # echo "Quality Gate Status: $QUALITY_GATE_STATUS"
          
          # Get issues breakdown with error handling - focusing on PR changes
          echo "üîç Fetching security issues for PR branch: ${{ github.head_ref }}..."
          
          # Add PR context to API calls to focus on new/changed issues
          PR_PARAMS="&branch=${{ github.head_ref }}"
          
          BLOCKER_RESPONSE=$(curl -s \
            "${SONAR_URL}/api/issues/search?componentKeys=${PROJECT_KEY}&severities=BLOCKER&resolved=false${PR_PARAMS}&token=${{ secrets.SONARQUBE_TOKEN }}")
          BLOCKER_ISSUES=$(echo "$BLOCKER_RESPONSE" | jq -r '.total // 0')
          
          CRITICAL_RESPONSE=$(curl -s \
            "${SONAR_URL}/api/issues/search?componentKeys=${PROJECT_KEY}&severities=CRITICAL&resolved=false${PR_PARAMS}&token=${{ secrets.SONARQUBE_TOKEN }}")
          CRITICAL_ISSUES=$(echo "$CRITICAL_RESPONSE" | jq -r '.total // 0')
          
          MEDIUM_RESPONSE=$(curl -s \
            "${SONAR_URL}/api/issues/search?componentKeys=${PROJECT_KEY}&severities=MAJOR&resolved=false${PR_PARAMS}&token=${{ secrets.SONARQUBE_TOKEN }}")
          MEDIUM_ISSUES=$(echo "$MEDIUM_RESPONSE" | jq -r '.total // 0')
          
          # Get security hotspots for PR
          HOTSPOTS_RESPONSE=$(curl -s \
            "${SONAR_URL}/api/hotspots/search?projectKey=${PROJECT_KEY}&status=TO_REVIEW&pullRequest=${{ github.head_ref }}&token=${{ secrets.SONARQUBE_TOKEN }}")
          SECURITY_HOTSPOTS=$(echo "$HOTSPOTS_RESPONSE" | jq -r '.paging.total // 0')
          
          echo "üü¢ JavaScript Security Issues Found:"
          echo "   üî¥ Blocker Issues: $BLOCKER_ISSUES"
          echo "   üü† Critical Issues: $CRITICAL_ISSUES" 
          echo "   üü° Medium Issues: $MEDIUM_ISSUES"
          echo "   üî• Security Hotspots: $SECURITY_HOTSPOTS"
          
          # Debug: Show API responses if issues found
          if [ "$BLOCKER_ISSUES" != "0" ] || [ "$CRITICAL_ISSUES" != "0" ] || [ "$MEDIUM_ISSUES" -gt 0 ] || [ "$SECURITY_HOTSPOTS" -gt 0 ]; then
            echo "üîç Debug - Blocker Response: $BLOCKER_RESPONSE"
            echo "üîç Debug - Critical Response: $CRITICAL_RESPONSE"
            echo "üîç Debug - Medium Response: $MEDIUM_RESPONSE"
            echo "üîç Debug - Security Hotspots Response: $HOTSPOTS_RESPONSE"
          fi
          
          # Set outputs for summary
          echo "blocker-issues=$BLOCKER_ISSUES" >> $GITHUB_OUTPUT
          echo "critical-issues=$CRITICAL_ISSUES" >> $GITHUB_OUTPUT
          echo "medium-issues=$MEDIUM_ISSUES" >> $GITHUB_OUTPUT
          echo "security-hotspots=$SECURITY_HOTSPOTS" >> $GITHUB_OUTPUT
          # echo "quality-gate-status=$QUALITY_GATE_STATUS" >> $GITHUB_OUTPUT
          
          # Check if we got valid numbers (not null or empty)
          if [ "$BLOCKER_ISSUES" = "null" ] || [ "$CRITICAL_ISSUES" = "null" ] || [ "$MEDIUM_ISSUES" = "null" ] || [ "$SECURITY_HOTSPOTS" = "null" ]; then
            echo "‚ö†Ô∏è Warning: Could not fetch issue counts from SonarQube API"
            echo "This might be due to:"
            echo "  - Analysis still in progress"
            echo "  - Project not found"
            echo "  - API authentication issues"
            echo ""
            echo "‚ùå JavaScript analysis FAILED: Unable to verify security status"
            exit 1
          fi
          
          # Security-focused validation (independent of quality gate)
          echo "üõ°Ô∏è Performing security-focused validation..."
          
          # Check for blocking security issues
          if [ "$BLOCKER_ISSUES" -gt 0 ] || [ "$CRITICAL_ISSUES" -gt 0 ]; then
            echo "‚ùå JavaScript analysis FAILED: Found $BLOCKER_ISSUES blocker and $CRITICAL_ISSUES critical security issues"
            echo "üö´ Build pipeline BLOCKED - Fix security issues before merge"
            exit 1
          elif [ "$MEDIUM_ISSUES" -gt 0 ]; then
            echo "‚ùå JavaScript analysis FAILED: Found $MEDIUM_ISSUES medium security issues (limit: 0)"
            echo "üö´ Build pipeline BLOCKED - Fix all medium priority security issues"
            exit 1
          elif [ "$SECURITY_HOTSPOTS" -gt 0 ]; then
            echo "‚ùå JavaScript analysis FAILED: Found $SECURITY_HOTSPOTS security hotspots (mandatory: 0)"
            echo "üö´ Build pipeline BLOCKED - Review and resolve all security hotspots before merge"
            exit 1
          else
            echo "‚úÖ JavaScript security analysis PASSED: No blocking security issues found"
            echo "üéâ JavaScript security validation completed successfully!"
          fi

  # Multi-Language Quality Gate Check
  quality-gate-check:
    name: üõ°Ô∏è SonarQube Quality Gate
    runs-on: ubuntu-latest
    needs: [detect-languages, python-sonarqube, java-sonarqube, javascript-sonarqube]
    if: always()
    steps:
      - name: Check SonarQube Quality Gates and Security Issues
        run: |
          echo "## üîç SonarQube SAST Security Analysis Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Project Key:** INT__${{ github.event.repository.name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Pull Request:** #${{ github.event.pull_request.number }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          OVERALL_FAILED="false"
          
          # Check Python results
          if [ "${{ needs.detect-languages.outputs.has-python }}" = "true" ]; then
            if [ "${{ needs.python-sonarqube.result }}" = "success" ]; then
              echo "‚úÖ **üêç Python SonarQube Analysis:** Passed" >> $GITHUB_STEP_SUMMARY
              echo "   - üî¥ Blocker Issues: 0" >> $GITHUB_STEP_SUMMARY
              echo "   - üü† Critical Issues: 0" >> $GITHUB_STEP_SUMMARY
              echo "   - üü° Medium Issues: 0" >> $GITHUB_STEP_SUMMARY
            else
              echo "‚ùå **üêç Python SonarQube Analysis:** FAILED" >> $GITHUB_STEP_SUMMARY
              echo "   - üö´ **BLOCKING:** Found security issues that prevent merge" >> $GITHUB_STEP_SUMMARY
              OVERALL_FAILED="true"
            fi
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check Java results
          if [ "${{ needs.detect-languages.outputs.has-java }}" = "true" ]; then
            if [ "${{ needs.java-sonarqube.result }}" = "success" ]; then
              echo "‚úÖ **‚òï Java SonarQube Analysis:** Passed" >> $GITHUB_STEP_SUMMARY
              echo "   - üî¥ Blocker Issues: 0" >> $GITHUB_STEP_SUMMARY
              echo "   - üü† Critical Issues: 0" >> $GITHUB_STEP_SUMMARY
              echo "   - üü° Medium Issues: 0" >> $GITHUB_STEP_SUMMARY
            else
              echo "‚ùå **‚òï Java SonarQube Analysis:** FAILED" >> $GITHUB_STEP_SUMMARY
              echo "   - üö´ **BLOCKING:** Found security issues that prevent merge" >> $GITHUB_STEP_SUMMARY
              OVERALL_FAILED="true"
            fi
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check JavaScript results
          if [ "${{ needs.detect-languages.outputs.has-javascript }}" = "true" ]; then
            if [ "${{ needs.javascript-sonarqube.result }}" = "success" ]; then
              echo "‚úÖ **üü¢ JavaScript SonarQube Analysis:** Passed" >> $GITHUB_STEP_SUMMARY
              echo "   - üî¥ Blocker Issues: 0" >> $GITHUB_STEP_SUMMARY
              echo "   - üü† Critical Issues: 0" >> $GITHUB_STEP_SUMMARY
              echo "   - üü° Medium Issues: 0" >> $GITHUB_STEP_SUMMARY
            else
              echo "‚ùå **üü¢ JavaScript SonarQube Analysis:** FAILED" >> $GITHUB_STEP_SUMMARY
              echo "   - üö´ **BLOCKING:** Found security issues that prevent merge" >> $GITHUB_STEP_SUMMARY
              OVERALL_FAILED="true"
            fi
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Overall status and enforcement
          if [ "$OVERALL_FAILED" = "true" ]; then
            echo "## ‚ùå üö´ QUALITY GATE FAILED - PR BLOCKED" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üìã **Immediate Actions Required:**" >> $GITHUB_STEP_SUMMARY
            echo "1. üîç **Review all BLOCKER and CRITICAL issues**" >> $GITHUB_STEP_SUMMARY
            echo "2. üõ†Ô∏è **Fix security vulnerabilities immediately**" >> $GITHUB_STEP_SUMMARY
            echo "3. üîß **Reduce MEDIUM issues to 10 or fewer**" >> $GITHUB_STEP_SUMMARY
            echo "4. ‚úÖ **Re-run pipeline to verify fixes**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üîó **[Fix Issues in SonarQube Dashboard ‚Üí](https://sonar.tools.deloitteinnovation.us/dashboard?id=INT__${{ github.event.repository.name }})**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**‚õî This PR cannot be merged until all security issues are resolved üö®**" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "## ‚úÖ üéâ ALL QUALITY GATES PASSED!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üõ°Ô∏è **Security Status:**" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ **No BLOCKER issues found**" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ **No CRITICAL issues found**" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ **MEDIUM issues within acceptable limits**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "üéâ **This PR meets all security requirements and is ready for review!**" >> $GITHUB_STEP_SUMMARY
          fi

  # SonarQube Security Gate Summary
  security-gate-summary:
    name: üõ°Ô∏è SonarQube Security Gate Summary
    needs: [detect-languages, quality-gate-check]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Generate security summary
        run: |
          echo "## üõ°Ô∏è SonarQube SAST Security Analysis Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Pull Request:** #${{ github.event.pull_request.number }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** \`${{ github.head_ref }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Base:** \`${{ github.base_ref }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Languages:** ${{ needs.detect-languages.outputs.languages }}" >> $GITHUB_STEP_SUMMARY
          echo "**Project Key:** INT__${{ github.event.repository.name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # SonarQube Status
          if [ "${{ needs.quality-gate-check.result }}" = "success" ]; then
            echo "‚úÖ **SonarQube Quality Gates:** All detected languages passed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üõ°Ô∏è **Security Validation:**" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ **0 BLOCKER issues** across all languages" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ **0 CRITICAL issues** across all languages" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ **0 MEDIUM issues** across all languages" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ **0 SECURITY_HOTSPOTS** across all languages" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **SonarQube Quality Gates:** Failed for one or more languages" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üö® **Security Issues Found:**" >> $GITHUB_STEP_SUMMARY
            echo "- üö´ **BLOCKING security issues detected**" >> $GITHUB_STEP_SUMMARY
            echo "- üîç **Review SonarQube dashboard for details**" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä **[View Detailed Analysis ‚Üí](https://sonar.tools.deloitteinnovation.us/dashboard?id=INT__${{ github.event.repository.name }})**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall status
          if [ "${{ needs.quality-gate-check.result }}" = "success" ]; then
            echo "üéâ **Overall Status:** All SonarQube security checks passed! PR is ready for review." >> $GITHUB_STEP_SUMMARY
            echo "security-passed=true" >> $GITHUB_OUTPUT
          else
            echo "üö® **Overall Status:** SonarQube security issues detected. Please fix before merging." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### ‚õî **This PR is BLOCKED until all security issues are resolved**" >> $GITHUB_STEP_SUMMARY
            echo "security-passed=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Comment PR with Results
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const projectKey = 'INT__${{ github.event.repository.name }}';
            const sonarUrl = `https://sonar.tools.deloitteinnovation.us/dashboard?id=${projectKey}`;
            const languages = '${{ needs.detect-languages.outputs.languages }}';
            const qualityGateResult = '${{ needs.quality-gate-check.result }}';
            const hasPython = '${{ needs.detect-languages.outputs.has-python }}';
            const hasJava = '${{ needs.detect-languages.outputs.has-java }}';
            const hasJavaScript = '${{ needs.detect-languages.outputs.has-javascript }}';
            
            // Instead of checking job results, check if quality-gate-check passed
            // The quality-gate-check job only passes if security validation actually passed
            let overallStatus = '‚úÖ Passed';
            let analysisRan = false;
            
            // Check if any languages were detected and analyzed
            if (hasPython === 'true' || hasJava === 'true' || hasJavaScript === 'true') {
              analysisRan = true;
              
              // Use quality-gate-check result instead of individual job results
              // because quality-gate-check validates the actual security outcomes
              if (qualityGateResult !== 'success') {
                overallStatus = '‚ùå Failed';
              }
            } else {
              overallStatus = '‚ö†Ô∏è No supported languages detected';
            }
            
            let analysisDetails = '';
            if (hasPython === 'true') {
              // Show passed if quality gate passed, regardless of job result
              analysisDetails += `\n   - üêç Python: ${qualityGateResult === 'success' ? '‚úÖ Passed' : '‚ùå Failed'}`;
            }
            if (hasJava === 'true') {
              analysisDetails += `\n   - ‚òï Java: ${qualityGateResult === 'success' ? '‚úÖ Passed' : '‚ùå Failed'}`;
            }
            if (hasJavaScript === 'true') {
              analysisDetails += `\n   - üü¢ JavaScript: ${qualityGateResult === 'success' ? '‚úÖ Passed' : '‚ùå Failed'}`;
            }
            
            const comment = `## üîç SonarQube SAST Security Analysis Results
            
            **Languages Detected:** ${languages || 'None'}
            **Pull Request:** #${{ github.event.pull_request.number }}
            **Project Key:** ${projectKey}
            
            ### üõ°Ô∏è SonarQube Security Checks:
            - **Overall Status:** ${overallStatus}${analysisDetails}
            - **Security Thresholds:** Enforcing 0 BLOCKER/CRITICAL/MEDIUM issues and 0 SECURITY_HOTSPOTS
            
            ${analysisRan ? `üìä **[View Full SonarQube Report](${sonarUrl})**` : '‚ö†Ô∏è **No analysis performed - no supported languages found**'}
            
            > This PR has been ${analysisRan ? 'analyzed' : 'checked'} for source code security issues using SonarQube SAST.
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
